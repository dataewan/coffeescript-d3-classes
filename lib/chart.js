// Generated by CoffeeScript 1.6.3
(function() {
  var AxesChart, BubblePlot, LinePlot, ScatterPlot, bubble, data, lineplot, scatter, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  AxesChart = (function() {
    function AxesChart() {
      this.draw = __bind(this.draw, this);
      this._width = 800;
      this._height = 600;
      this._margin = {
        top: 50,
        left: 50,
        bottom: 50,
        right: 50
      };
      this._colours = ["#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00", "#FFFF33", "#A65628", "#F781BF", "#999999"];
    }

    AxesChart.prototype.draw = function() {
      var _this = this;
      this.setup();
      this.predraw();
      this.selection.each(function(d, i) {
        return _this._draw(d, i);
      });
      return this.postdraw();
    };

    AxesChart.prototype.setup = function() {
      this.selection = d3.select(this._el);
      this.selection.datum(this._data);
      this._canvas = this.selection.append("svg").attr("width", this._width + this._margin.left + this._margin.right).attr("height", this._height + this._margin.top + this._margin.bottom);
      return this._plotarea = this._canvas.append("g").attr("transform", "translate(" + this._margin.left + ", " + this._margin.top + ")");
    };

    AxesChart.prototype._draw = function(d, i) {
      throw "Not implemented";
    };

    AxesChart.prototype.predraw = function() {};

    AxesChart.prototype.postdraw = function() {};

    AxesChart.prototype.el = function(value) {
      if (!arguments.length) {
        return this._el;
      }
      this._el = value;
      return this;
    };

    AxesChart.prototype.data = function(value) {
      if (!arguments.length) {
        return this._data;
      }
      this._data = value;
      return this;
    };

    AxesChart.prototype.width = function(value) {
      if (!arguments.length) {
        return this._width;
      }
      this._width = value;
      return this;
    };

    AxesChart.prototype.height = function(value) {
      if (!arguments.length) {
        return this._height;
      }
      this._height = value;
      return this;
    };

    AxesChart.prototype.margin = function(value) {
      if (!arguments.length) {
        return this._margin;
      }
      this._margin = value;
      return this;
    };

    AxesChart.prototype.xscale = function(value) {
      if (!arguments.length) {
        return this._xscale;
      }
      this._xscale = value;
      return this;
    };

    AxesChart.prototype.yscale = function(value) {
      if (!arguments.length) {
        return this._yscale;
      }
      this._yscale = value;
      return this;
    };

    AxesChart.prototype.x = function(i) {
      if (this._xscale == null) {
        return i;
      }
      return this._xscale(i);
    };

    AxesChart.prototype.y = function(i) {
      if (this._yscale == null) {
        return i;
      }
      return this._yscale(i);
    };

    AxesChart.prototype.colour = function(i) {
      if (this.levels == null) {
        this.levels = _.uniq(_.pluck(this.data(), "group"));
        console.log(this.levels);
      }
      return this._colours[_.indexOf(this.levels, i)];
    };

    AxesChart.prototype.xaxis = function() {
      if (this._xscale != null) {
        if (this._xaxis == null) {
          this._xaxis = d3.svg.axis().scale(this._xscale).orient("bottom");
        }
        return this._plotarea.append("g").attr("class", "x axis").attr("transform", "translate(0, " + this._height + ")").call(this._xaxis);
      }
    };

    AxesChart.prototype.yaxis = function() {
      if (this._yscale != null) {
        if (this._yaxis == null) {
          this._yaxis = d3.svg.axis().scale(this._yscale).orient('left');
        }
        return this._plotarea.append("g").attr("class", "y axis").call(this._yaxis);
      }
    };

    return AxesChart;

  })();

  ScatterPlot = (function(_super) {
    __extends(ScatterPlot, _super);

    function ScatterPlot(pointsize) {
      if (pointsize == null) {
        pointsize = 5;
      }
      ScatterPlot.__super__.constructor.apply(this, arguments);
      this._pointsize = pointsize;
    }

    ScatterPlot.prototype._draw = function(d, i) {
      var _this = this;
      return this._plotarea.selectAll("circle").data(d).enter().append("circle").attr("r", this._pointsize).attr("cx", function(d) {
        return _this.x(d.x);
      }).attr("cy", function(d) {
        return _this.y(d.y);
      }).attr("fill", function(d) {
        return _this.colour(d.group);
      });
    };

    ScatterPlot.prototype.postdraw = function() {
      this.xaxis();
      return this.yaxis();
    };

    return ScatterPlot;

  })(AxesChart);

  BubblePlot = (function(_super) {
    __extends(BubblePlot, _super);

    function BubblePlot(maxpointsize) {
      if (maxpointsize == null) {
        maxpointsize = 20;
      }
      BubblePlot.__super__.constructor.apply(this, arguments);
      this._maxpointsize = maxpointsize;
    }

    BubblePlot.prototype.predraw = function() {
      var extent;
      extent = d3.extent(_.pluck(data, "z"));
      return this.radiusscale = d3.scale.linear().domain(extent).range([5, this._maxpointsize]);
    };

    BubblePlot.prototype.postdraw = function() {
      this.xaxis();
      return this.yaxis();
    };

    BubblePlot.prototype._draw = function(d, i) {
      var _this = this;
      return this._plotarea.selectAll("circle").data(d).enter().append("circle").attr("r", function(d) {
        return Math.pow(_this.radiusscale(d.z), 1 / 2) * Math.PI;
      }).attr("cx", function(d) {
        return _this.x(d.x);
      }).attr("cy", function(d) {
        return _this.y(d.y);
      }).attr("fill", function(d) {
        return _this.colour(d.group);
      });
    };

    return BubblePlot;

  })(AxesChart);

  LinePlot = (function(_super) {
    __extends(LinePlot, _super);

    function LinePlot() {
      _ref = LinePlot.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    LinePlot.prototype._draw = function(d, i) {
      var line, series,
        _this = this;
      series = _.pairs(_.groupBy(this._data, 'group'));
      if (this.line == null) {
        line = d3.svg.line().interpolate("linear").x(function(d) {
          return _this.x(d.x);
        }).y(function(d) {
          return _this.y(d.y);
        });
      }
      console.log(series);
      return this._plotarea.selectAll('.dataline').data(series).enter().append("path").attr("class", "dataline").attr("d", function(d) {
        return line(d[1]);
      }).attr("stroke", function(d) {
        return _this.colour(d[0]);
      });
    };

    LinePlot.prototype.postdraw = function() {
      this.xaxis();
      return this.yaxis();
    };

    return LinePlot;

  })(AxesChart);

  data = [
    {
      x: 45,
      y: 10,
      z: 1,
      group: "one"
    }, {
      x: 20,
      y: 99,
      z: 1,
      group: "one"
    }, {
      x: 30,
      y: 21,
      z: 1,
      group: "one"
    }, {
      x: 21,
      y: 67,
      z: 2,
      group: "two"
    }, {
      x: 50,
      y: 50,
      z: 1,
      group: "three"
    }, {
      x: 34,
      y: 34,
      z: 3,
      group: "four"
    }, {
      x: 21,
      y: 54,
      z: 3,
      group: "three"
    }, {
      x: 65,
      y: 23,
      z: 3,
      group: "four"
    }, {
      x: 87,
      y: 54,
      z: 3,
      group: "three"
    }, {
      x: 45,
      y: 98,
      z: 3,
      group: "four"
    }, {
      x: 72,
      y: 78,
      z: 3,
      group: "three"
    }, {
      x: 23,
      y: 12,
      z: 3,
      group: "four"
    }
  ];

  scatter = new ScatterPlot(15);

  scatter.width(800).height(600).el('div#scatterplot').data(data);

  scatter.xscale(d3.scale.linear().domain([0, 100]).range([0, scatter.width()]));

  scatter.yscale(d3.scale.linear().domain([0, 100]).range([scatter.height(), 0]));

  scatter.draw();

  bubble = new BubblePlot(15);

  bubble.width(800).height(600).el('div#bubbleplot').data(data);

  bubble.xscale(d3.scale.linear().domain([0, 100]).range([0, bubble._width]));

  bubble.yscale(d3.scale.linear().domain([0, 100]).range([bubble._height, 0]));

  bubble.draw();

  lineplot = new LinePlot(15);

  lineplot.width(800).height(600).el('div#lineplot').data(data);

  lineplot.xscale(d3.scale.linear().domain([0, 100]).range([0, lineplot._width]));

  lineplot.yscale(d3.scale.linear().domain([0, 100]).range([lineplot._height, 0]));

  lineplot.draw();

}).call(this);
